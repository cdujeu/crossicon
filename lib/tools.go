package lib

import (
	"fmt"
	"image/png"
	"io"
	"text/template"

	"github.com/Kodeworks/golang-image-ico"
)

var Template = `// +build {{.BuildOS}}

// Generated by crossicon, do not edit this file manually

package {{.PackageName}}

var Data []byte = []byte{ {{range $element := .Lines}}{{$element}}{{end}}
}
`

type TplData struct {
	BuildOS     string
	PackageName string
	Lines       []string
}

func ConvertToIco(source io.Reader, target io.Writer) error {

	img, err := png.Decode(source)
	if err != nil {
		return err
	}

	return ico.Encode(target, img)

}

func AsBytesArray(target io.Writer, packageName string, os string, data io.Reader) error {
	tpl := template.New("file")
	tpl.Parse(Template)
	tplData := &TplData{
		PackageName: packageName,
		BuildOS:     os,
	}

	buf := make([]byte, 1)
	var err error
	var totalBytes uint64
	var n int
	for n, err = data.Read(buf); n > 0 && err == nil; {
		if totalBytes%12 == 0 {
			tplData.Lines = append(tplData.Lines, "\n\t")
		}
		tplData.Lines = append(tplData.Lines, fmt.Sprintf("0x%02x, ", buf[0]))
		totalBytes++
		n, err = data.Read(buf)
	}
	if err != nil && err != io.EOF {
		return err
	}

	return tpl.Execute(target, tplData)
}
